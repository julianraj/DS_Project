package app.server;


/**
* app/server/ServerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from App.idl
* Wednesday, December 6, 2017 6:38:31 o'clock PM EST
*/

public abstract class ServerPOA extends org.omg.PortableServer.Servant
 implements app.server.ServerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("createRoom", new java.lang.Integer (0));
    _methods.put ("deleteRoom", new java.lang.Integer (1));
    _methods.put ("bookRoom", new java.lang.Integer (2));
    _methods.put ("getAvailableTimeSlots", new java.lang.Integer (3));
    _methods.put ("cancelBooking", new java.lang.Integer (4));
    _methods.put ("changeReservation", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  //        typedef sequence<string> listSlots;
       case 0:  // app/server/Server/createRoom
       {
         String admin_id = in.read_string ();
         int room_number = in.read_long ();
         String date = in.read_string ();
         String list_of_time_slots = in.read_string ();
         String $result = null;
         $result = this.createRoom (admin_id, room_number, date, list_of_time_slots);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // app/server/Server/deleteRoom
       {
         String admin_id = in.read_string ();
         int room_number = in.read_long ();
         String date = in.read_string ();
         String list_of_time_slots = in.read_string ();
         String $result = null;
         $result = this.deleteRoom (admin_id, room_number, date, list_of_time_slots);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 2:  // app/server/Server/bookRoom
       {
         String student_id = in.read_string ();
         String campus_name = in.read_string ();
         int room_number = in.read_long ();
         String date = in.read_string ();
         String slots = in.read_string ();
         String $result = null;
         $result = this.bookRoom (student_id, campus_name, room_number, date, slots);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // app/server/Server/getAvailableTimeSlots
       {
         String student_id = in.read_string ();
         String date = in.read_string ();
         String $result = null;
         $result = this.getAvailableTimeSlots (student_id, date);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // app/server/Server/cancelBooking
       {
         String student_id = in.read_string ();
         String booking_id = in.read_string ();
         String $result = null;
         $result = this.cancelBooking (student_id, booking_id);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 5:  // app/server/Server/changeReservation
       {
         String student_id = in.read_string ();
         String booking_id = in.read_string ();
         String new_campus_name = in.read_string ();
         int new_room_no = in.read_long ();
         String new_date = in.read_string ();
         String new_time_slot = in.read_string ();
         String $result = null;
         $result = this.changeReservation (student_id, booking_id, new_campus_name, new_room_no, new_date, new_time_slot);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:app/server/Server:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Server _this() 
  {
    return ServerHelper.narrow(
    super._this_object());
  }

  public Server _this(org.omg.CORBA.ORB orb) 
  {
    return ServerHelper.narrow(
    super._this_object(orb));
  }


} // class ServerPOA
